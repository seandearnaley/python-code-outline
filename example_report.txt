- app/data_types/__init__.py

- app/data_types/summary.py
from typing imports Dict, Optional, TypedDict
class RedditData(TypedDict)
class GenerateSettings(TypedDict)
class ModelConfig(TypedDict)
class ConfigVars(TypedDict)

- app/services/anthropic_connector.py
imports anthropic
from config imports ConfigLoader
from data_types.summary imports GenerateSettings
from env imports EnvVarsLoader
from log_tools imports Logger
func complete_anthropic_text(prompt, max_tokens, settings)

- app/services/openai_connector.py
imports openai
from config imports OPEN_AI_CHAT_TYPE, ConfigLoader
from data_types.summary imports GenerateSettings
from env imports EnvVarsLoader
from log_tools imports Logger
from openai.openai_object imports OpenAIObject
func complete_openai_text(prompt, max_tokens, settings)
	var is_chat

- app/tests/__init__.py

- app/tests/test_utils.py
imports os
imports tiktoken
from config imports OPEN_AI_CHAT_TYPE
from utils.common imports generate_filename, get_timestamp, save_output
from utils.llm_utils imports num_tokens_from_string
func test_num_tokens_from_string()
func test_generate_filename()
func test_save_output()
	var expected_filename
	var result

- app/ui/render.py
imports logging
from typing imports Optional
imports streamlit
from config imports ConfigLoader
from data_types.summary imports GenerateSettings
from generate_data imports generate_summary_data, get_reddit_praw
from ui.settings imports render_settings
from utils.common imports is_valid_reddit_url, replace_last_token_with_json, save_output
func render_input_box()
func render_output(reddit_url, app_logger, settings)
	var output_placeholder
func render_layout(app_logger, reddit_url, settings)
	var settings

- app/ui/settings.py
from typing imports Tuple
imports streamlit
from config imports ANTHROPIC_AI_MODELS, ANTHROPIC_AI_TYPE, OPEN_AI_CHAT_MODELS, OPEN_AI_CHAT_TYPE, OPEN_AI_INSTRUCT_MODELS, OPEN_AI_INSTRUCT_TYPE, ConfigLoader
from data_types.summary imports GenerateSettings
from utils.streamlit_decorators imports expander_decorator
func model_selection(col)
	var model_types
	var selected_model_type
	var models
	var model_ids_sorted
	var selected_model
	var selected_model_config
func render_settings()

- app/utils/__init__.py

- app/utils/common.py
imports os
imports re
from datetime imports datetime
func generate_filename(title)
	var filename
	var filename
func get_timestamp()
func save_output(title, output)
	var output_folder
	var output_path
	var output_filename
	var output_file_path
func replace_last_token_with_json(reddit_url)
	var tokens
func is_valid_reddit_url(url)
	var pattern

- app/utils/llm_utils.py
imports math
imports re
from typing imports List
imports anthropic
imports tiktoken
from config imports ANTHROPIC_AI_TYPE, OPEN_AI_CHAT_TYPE
func group_bodies_into_chunks(contents, token_length)
	var current_chunk
func num_tokens_from_string(string, model_type)
	var is_anthropic
	var num_tokens
func estimate_word_count(num_tokens)
func validate_max_tokens(max_tokens)

- app/utils/streamlit_decorators.py
from functools imports wraps
from typing imports Any, Callable, TypeVar
imports streamlit
func error_to_streamlit(func)
func expander_decorator(title)
func spinner_decorator(title)

- app/__init__.py

- app/config.py
from datetime imports datetime
from functools imports wraps
from typing imports Any, Callable, Dict, List, Tuple, TypeVar
from data_types.summary imports ConfigVars, ModelConfig
class ConfigLoader()
	func get_config(cls)
func with_config(func)

- app/debug_tools.py
imports logging
from typing imports Any
imports debugpy
class Debugger()
	func setup_debugpy(cls, streamlit, logger, flag, wait_for_client, host, port)
	func _initialize_debugging_state(cls, streamlit)
	func _activate_debugging(cls, streamlit, logger, wait_for_client, host, port)
	func _deactivate_debugging(cls, streamlit, logger)

- app/env.py
imports os
from typing imports Optional, TypedDict
from dotenv imports load_dotenv
from log_tools imports Logger
class EnvVars(TypedDict)
class EnvVarsLoader()
	func load_env()
		var org_id
		var api_key
		var reddit_client_id
		var reddit_client_secret
		var reddit_username
		var reddit_password
		var reddit_user_agent
		var anthropic_api_key

- app/generate_data.py
imports logging
imports re
from datetime imports datetime
from typing imports Any, Callable, List, Optional, Tuple
imports praw
from config imports ConfigLoader
from data_types.summary imports GenerateSettings, RedditData
from env imports EnvVarsLoader
from llm_handler imports complete_text
from log_tools imports Logger
from utils.llm_utils imports estimate_word_count, group_bodies_into_chunks, num_tokens_from_string
from utils.streamlit_decorators imports spinner_decorator
func summarize_summary(selftext, settings, title, max_tokens)
	var summary_string
	var out_text
func format_date(timestamp)
func get_comments(comment, level)
	var result
	var author_name
	var created_date
func get_reddit_praw(json_url, logger)
func generate_summary_data(settings, reddit_data, logger, progress_callback)
func generate_summaries(settings, groups, prompt, subreddit, progress_callback)
	var total_groups

- app/llm_handler.py
from config imports ANTHROPIC_AI_TYPE
from data_types.summary imports GenerateSettings
from log_tools imports Logger
from pyrate_limiter imports Duration, Limiter, RequestRate
from services.anthropic_connector imports complete_anthropic_text
from services.openai_connector imports complete_openai_text
from utils.llm_utils imports validate_max_tokens
from utils.streamlit_decorators imports error_to_streamlit
func complete_text(prompt, max_tokens, settings)
	var selected_model_type
	var is_anthropic

- app/log_tools.py
imports logging
imports logging.config
imports os
from datetime imports datetime
from functools imports wraps
from typing imports Any, Callable, Optional, TypeVar
from config imports ConfigLoader
class Logger()
	func log(cls, func, logger)
	func get_app_logger(cls)

- app/main.py
imports streamlit
from config imports ConfigLoader, ConfigVars
from debug_tools imports Debugger
from log_tools imports Logger
from ui.render imports render_layout
func main(config)

- app/recursive_summary.py
imports os
imports sys
from typing imports Any, Dict
imports openai
from dotenv imports load_dotenv
from pyrate_limiter imports Duration, Limiter, RequestRate
from utils.llm_utils imports estimate_word_count, num_tokens_from_string
func load_text_file(filename)
	var script_directory
	var file_path
func write_text_file(text, filename)
	var script_directory
	var file_path
func recursive_summarization(summary_size, chunk_text, prefix_text)
	var summary_string
	var summary_string
	var response_text
func summarize_text(text, max_token_length, max_tokens)
	var original_num_tokens
	var summary_size
	var chunks
	var result
	var summary
	var num_tokens
func cleanup_summary(text, summary_size, max_tokens)
	var summary_size
	var cleanup_prompt
	var cleanup_prompt
	var response_text